<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ida on Pablo de Juan Fidalgo</title><link>https://pabdj.github.io/tags/ida/</link><description>Recent content in ida on Pablo de Juan Fidalgo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Pablo de Juan Fidalgo</copyright><lastBuildDate>Mon, 26 Dec 2022 14:25:58 +0530</lastBuildDate><atom:link href="https://pabdj.github.io/tags/ida/index.xml" rel="self" type="application/rss+xml"/><item><title>Advanced Static Techniques - Analyzing Malicious Windows Programs</title><link>https://pabdj.github.io/posts/advancedstatictechniques_analyzing_malicious_windows_programs/advancedstatictechniques_analyzingmaliciouswindowsprograms/</link><pubDate>Mon, 26 Dec 2022 14:25:58 +0530</pubDate><guid>https://pabdj.github.io/posts/advancedstatictechniques_analyzing_malicious_windows_programs/advancedstatictechniques_analyzingmaliciouswindowsprograms/</guid><description>Notes DWORD and WORD types represent 32-bit and 16-bit unsigned integers. Windows does not use int, short or unsigned. Windows API types Handles (H). A reference to an object. Long Pointer (LP). A pointer to another type. CreateFile. This function is used to create and open files. The parameter dwCreationDisposition controls whether the CreateFile function creates a new file or opens an existing one. CreateFileMapping and MapViewOfFile. File mappings are commonly used by malware writers because they allow a file to be loaded into memory and manipulated easily.</description></item><item><title>Advanced Static Techniques - Recognizing C code constructs in Assembly</title><link>https://pabdj.github.io/posts/advancedstatictechniques_c_code_constructs_in_assembly/advancedstatictechniques_recognizingccodeconstructsinassembly/</link><pubDate>Sat, 24 Dec 2022 14:15:58 +0530</pubDate><guid>https://pabdj.github.io/posts/advancedstatictechniques_c_code_constructs_in_assembly/advancedstatictechniques_recognizingccodeconstructsinassembly/</guid><description>Table of Contents Notes Global vs. Local Variables Understanding Function Call Conventions Labs Lab 1 Lab 2 Lab 3 Lab 4 Notes Global vs. Local Variables Global variables are referenced by memory addresses, and the local variables are referenced by the stack addresses. Understanding Function Call Conventions cdecl is one of the most popular conventions. In cdecl, parameters are pushed onto the stack from right to left, the caller cleans up the stack when the function is complete, and the return value is stored in EAX.</description></item><item><title>Advanced Static Techniques - IDA Pro and Ghidra</title><link>https://pabdj.github.io/posts/advancedstatictechniques_idapro/advancedstatictechniques_idapro/</link><pubDate>Wed, 21 Dec 2022 19:30:58 +0530</pubDate><guid>https://pabdj.github.io/posts/advancedstatictechniques_idapro/advancedstatictechniques_idapro/</guid><description>Table of Contents Notes The IDA Pro Interface Ghidra Modifications References Labs Lab 1 This chapter is about learning the powerful tool called IDA Pro. Unfortunately, this tool requires an expensive license, so I will try to apply all the content from the book into Ghidra.
In My Awesome List there are multiple pointers to interesting tricks and tips to enhance Ghidra. Apart from that, in Create your own malware analysis lab - Upgrading FLARE VM there is a link to several scripts that are thought to provide a similar experience to IDA Pro.</description></item></channel></rss>