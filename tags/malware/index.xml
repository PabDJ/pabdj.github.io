<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>malware on Pablo de Juan Fidalgo</title><link>https://pabdj.github.io/tags/malware/</link><description>Recent content in malware on Pablo de Juan Fidalgo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Pablo de Juan Fidalgo</copyright><lastBuildDate>Mon, 26 Dec 2022 14:25:58 +0530</lastBuildDate><atom:link href="https://pabdj.github.io/tags/malware/index.xml" rel="self" type="application/rss+xml"/><item><title>Advanced Static Techniques - Analyzing Malicious Windows Programs</title><link>https://pabdj.github.io/posts/advancedstatictechniques_analyzing_malicious_windows_programs/advancedstatictechniques_analyzingmaliciouswindowsprograms/</link><pubDate>Mon, 26 Dec 2022 14:25:58 +0530</pubDate><guid>https://pabdj.github.io/posts/advancedstatictechniques_analyzing_malicious_windows_programs/advancedstatictechniques_analyzingmaliciouswindowsprograms/</guid><description>Notes DWORD and WORD types represent 32-bit and 16-bit unsigned integers. Windows does not use int, short or unsigned. Windows API types Handles (H). A reference to an object. Long Pointer (LP). A pointer to another type. CreateFile. This function is used to create and open files. The parameter dwCreationDisposition controls whether the CreateFile function creates a new file or opens an existing one. CreateFileMapping and MapViewOfFile. File mappings are commonly used by malware writers because they allow a file to be loaded into memory and manipulated easily.</description></item><item><title>Advanced Static Techniques - Recognizing C code constructs in Assembly</title><link>https://pabdj.github.io/posts/advancedstatictechniques_c_code_constructs_in_assembly/advancedstatictechniques_recognizingccodeconstructsinassembly/</link><pubDate>Sat, 24 Dec 2022 14:15:58 +0530</pubDate><guid>https://pabdj.github.io/posts/advancedstatictechniques_c_code_constructs_in_assembly/advancedstatictechniques_recognizingccodeconstructsinassembly/</guid><description>Notes Global vs. Local Variables Global variables are referenced by memory addresses, and the local variables are referenced by the stack addresses. Understanding Function Call Conventions cdecl is one of the most popular conventions. In cdecl, parameters are pushed onto the stack from right to left, the caller cleans up the stack when the function is complete, and the return value is stored in EAX. The popular stdcall convention is similar to cdecl, except stdcall requires the callee to clean up the stack when the function is complete.</description></item><item><title>Advanced Static Techniques - IDA Pro and Ghidra</title><link>https://pabdj.github.io/posts/advancedstatictechniques_idapro/advancedstatictechniques_idapro/</link><pubDate>Wed, 21 Dec 2022 19:30:58 +0530</pubDate><guid>https://pabdj.github.io/posts/advancedstatictechniques_idapro/advancedstatictechniques_idapro/</guid><description>This chapter is about learning the powerful tool called IDA Pro. Unfortunately, this tool requires an expensive license, so I will try to apply all the content from the book into Ghidra.
In My Awesome List there are multiple pointers to interesting tricks and tips to enhance Ghidra. Apart from that, in Create your own malware analysis lab - Upgrading FLARE VM there is a link to several scripts that are thought to provide a similar experience to IDA Pro.</description></item><item><title>Advanced Static Techniques - x86 Disassembly</title><link>https://pabdj.github.io/posts/advanced-static-techniques-_-x86-disassembly/</link><pubDate>Mon, 19 Dec 2022 09:50:58 +0530</pubDate><guid>https://pabdj.github.io/posts/advanced-static-techniques-_-x86-disassembly/</guid><description>This blog post collects some notes that I took while reading PMA Chapter 4. As it was not the first time dealing with assembly most of the concepts rang a bell.
Opcodes and Endianness Network data uses big-endian and an x86 program uses little-endian. Therefore, the IP address 127.0.0.1 will be represented as 0x7F000001 in big endian format (over the network) and 0x0100007F in little-endian format (locally in memory)
Registers General registers Some x86 instructions use specific registers by definition.</description></item><item><title>Basic Dynamic Techniques - Notes &amp; Labs</title><link>https://pabdj.github.io/posts/basicdynamictechniques_notesandlabs/basicdynamictechniques_notesandlabs/</link><pubDate>Sat, 17 Dec 2022 12:50:58 +0530</pubDate><guid>https://pabdj.github.io/posts/basicdynamictechniques_notesandlabs/basicdynamictechniques_notesandlabs/</guid><description>Notes Running malware How to launch DLLs successfully in dynamic analysis: take a look at the Exports with CFF Explorer and afterwards run the following command C:\&amp;gt;rundll32.exe DLLname, Export arguments with one of the Export functions that have appeared in the static analysis. To convert the DLL file into an executable, modify the PE header wiping the IMAGE_FILE_DLL (0x2000) flag from the Characteristics field in the IMAGE_FILE_HEADER. DLL malware may also need to be installed as a service, sometimes with a convenient export such as InstallService, as listed in ipr32x.</description></item><item><title>Basic Static Techniques - Notes &amp; Labs</title><link>https://pabdj.github.io/posts/basicstatictechniques_notesandlabs/basicstatictechniques_notesandlabs/</link><pubDate>Thu, 08 Dec 2022 12:50:58 +0530</pubDate><guid>https://pabdj.github.io/posts/basicstatictechniques_notesandlabs/basicstatictechniques_notesandlabs/</guid><description>Notes Hashing: A Fingerprint for Malware We will use HashCalc tool.
Finding Strings For this task we will use FLOSS (FLARE Obfuscated String Solver) tool
Packed and Obfuscated Malware Packed and obfuscated code will often include at least the functions LoadLibrary and GetProcAddress, which are used to load and gain access to additional functions. UPX: the Ultimate Packer for eXecutables Several Microsoft Windows functions allow programmers to import linked functions not listed in a program&amp;rsquo;s file header.</description></item><item><title>Create your own malware analysis lab</title><link>https://pabdj.github.io/posts/create-your-own-malware-analysis-lab/</link><pubDate>Wed, 07 Dec 2022 12:50:58 +0530</pubDate><guid>https://pabdj.github.io/posts/create-your-own-malware-analysis-lab/</guid><description>The first thing in order to analyse malware is setting up a safe environment with a large set of tools that help you in this task.
As we do not want to infect our host system, we are going to use virtual machines without Internet connection. First of all, we are going to deploy an analysis machine which will have Windows as Operative System and a REMnux machine which will act as a DHCP server.</description></item><item><title>My Awesome List</title><link>https://pabdj.github.io/posts/my-awesome-list/</link><pubDate>Tue, 15 Nov 2022 20:50:58 +0530</pubDate><guid>https://pabdj.github.io/posts/my-awesome-list/</guid><description>As a person who is always willing to learn new stuff, one thing that characterizes me is the obsession to save content for the future. The problem of saving content in different social networks is that you end up forgetting about it, and you do not put it in practice. The goal of this post, that will be continuing evolving, is to organise those resources in a useful list.
If you have something cool, and you do not find it here, do not hesitate to contact me via Twitter @pabdjf and I will include it.</description></item></channel></rss>