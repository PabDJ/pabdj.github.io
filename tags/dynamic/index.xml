<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dynamic on Pablo de Juan Fidalgo</title><link>https://pabdj.github.io/tags/dynamic/</link><description>Recent content in dynamic on Pablo de Juan Fidalgo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Pablo de Juan Fidalgo</copyright><lastBuildDate>Sat, 01 Apr 2023 15:00:58 +0530</lastBuildDate><atom:link href="https://pabdj.github.io/tags/dynamic/index.xml" rel="self" type="application/rss+xml"/><item><title>Malware Functionality - Covert Malware Launching</title><link>https://pabdj.github.io/posts/malwarefunctionality_covert_malware_launching/covert-malware-launching/</link><pubDate>Sat, 01 Apr 2023 15:00:58 +0530</pubDate><guid>https://pabdj.github.io/posts/malwarefunctionality_covert_malware_launching/covert-malware-launching/</guid><description>Table of Contents Notes Launchers Process Injection DLL injection Direct injection Process Replacement Hook Injection Keyloggers Using SetWindowsHookEx Detours APC Injection From User Space From Kernel Space Labs Lab 1 Lab 2 Lab 3 Lab 4 Notes Launchers Type of malware that sets itself or another piece of malware for immediate or future covert execution. Launchers will often store malware within the resource section. When the launcher is run, it extracts an embedded executable or DLL from the resource section before launching it.</description></item><item><title>Malware Functionality - Malware Behaviour</title><link>https://pabdj.github.io/posts/malwarefunctionality_malware_behaviour/malware-behaviour/</link><pubDate>Mon, 27 Mar 2023 22:53:58 +0530</pubDate><guid>https://pabdj.github.io/posts/malwarefunctionality_malware_behaviour/malware-behaviour/</guid><description>Table of Contents Notes Downloaders and Launchers Backdoors Reverse shell RATs Botnets Credential Stealers GINA Interception Hash Dumping Keystroke Logging Persistence Mechanisms Windows Registry AppInit_DLLs Winlogon Notify SvcHost DLLs Trojanized System Binaries DLL Load-Order Hijacking Privilege Escalation Covering Its Tracks—User-Mode Rootkits IAT Hooking Inline Hooking Labs Lab 1 Lab 2 Lab 3 Notes Downloaders and Launchers Downloaders simply download another piece of malware from the Internet and execute it on the local system.</description></item><item><title>Advanced Dynamic Techniques - WinDbg</title><link>https://pabdj.github.io/posts/advanceddynamictechniques_windbg/advanceddynamictechniques_windbg/</link><pubDate>Fri, 24 Mar 2023 19:53:58 +0530</pubDate><guid>https://pabdj.github.io/posts/advanceddynamictechniques_windbg/advanceddynamictechniques_windbg/</guid><description>Table of Contents Notes Drivers and Kernel Code Setting Up Kernel Debugging Windows XP and x86 architecture Windows Vista, Windows 7, and x64 Versions Using WinDbg Microsoft Symbols Kernel Debugging in Practice User-space code Kernel-space code Loading Drivers Labs Lab 1 Lab 2 Lab 3 Notes Drivers and Kernel Code Drivers must be loaded into the kernel, just as DLLs are loaded into processes. When a driver is first loaded, its DriverEntry procedure is called, similar to DLLMain for DLLs.</description></item><item><title>Advanced Dynamic Techniques - OllyDbg</title><link>https://pabdj.github.io/posts/advanceddynamictechniques_ollydbg/advanceddynamictechniques_ollydbg/</link><pubDate>Wed, 11 Jan 2023 15:20:58 +0530</pubDate><guid>https://pabdj.github.io/posts/advanceddynamictechniques_ollydbg/advanceddynamictechniques_ollydbg/</guid><description>Table of Contents Notes Memory map Breakpoints Loading DLLs Labs Lab 1 Lab 2 Lab 3 Notes Memory map All PE files in Windows have a preferred base address, known as the image base defined in the PE header. The image base isn’t necessarily the address where the malware will be loaded, although it usually is. Most executables are designed to be loaded at 0x00400000, which is just the default address used by many compilers for the Windows platform.</description></item><item><title>Advanced Dynamic Techniques - Debugging</title><link>https://pabdj.github.io/posts/advanced-dynamic-techniques_debugging/</link><pubDate>Tue, 27 Dec 2022 12:25:58 +0530</pubDate><guid>https://pabdj.github.io/posts/advanced-dynamic-techniques_debugging/</guid><description>Table of Contents Kernel vs. User-Mode Debugging Breakpoints Software breakpoints Hardware breakpoints Exceptions First- and Second-Chance Exceptions Notes Kernel vs. User-Mode Debugging It is more challenging to debug kernel-mode code than to debug user-mode code because you usually need two different systems for kernel mode.
Kernel debugging is performed on two systems because there is only one kernel; if the kernel is at a breakpoint, no applications can be running on the system.</description></item><item><title>Basic Dynamic Techniques - Notes &amp; Labs</title><link>https://pabdj.github.io/posts/basicdynamictechniques_notesandlabs/basicdynamictechniques_notesandlabs/</link><pubDate>Sat, 17 Dec 2022 12:50:58 +0530</pubDate><guid>https://pabdj.github.io/posts/basicdynamictechniques_notesandlabs/basicdynamictechniques_notesandlabs/</guid><description>Table of Contents Notes Running malware Tools Procmon Process Explorer Regshot ApateDNS InetSim Labs Lab 1 Lab 2 Lab 3 Lab 4 Notes Running malware How to launch DLLs successfully in dynamic analysis: take a look at the Exports with CFF Explorer and afterwards run the following command C:\&amp;gt;rundll32.exe DLLname, Export arguments with one of the Export functions that have appeared in the static analysis. To convert the DLL file into an executable, modify the PE header wiping the IMAGE_FILE_DLL (0x2000) flag from the Characteristics field in the IMAGE_FILE_HEADER.</description></item></channel></rss>